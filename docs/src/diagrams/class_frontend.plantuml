@startuml class_frontend

' java -jar C:\ProgramData\chocolatey\lib\plantuml\tools\plantuml.jar -picoweb

' 0 to turn off icons, default 10
' skinparam classAttributeIconSize 0

package Models {
    Pathfinding.HeapDataStructure -[hidden]- Graph

    package Pathfinding {
        abstract class Pathfinding {
            + {static} name: string {readOnly}
            + graph: Graph {readOnly}
            + start: Vertex {readOnly}
            + end: Vertex {readOnly}
            + isFinished: boolean {readOnly}
            + Pathfinding(start: Stop, end: Stop, tme: Time)
            - visit(e: DirectedWeightedEdge)
            # init()
            + next()
            + nextWalking()
            + {abstract} getWeight(v: Vertex): number
            + reset()
            + getCompletePath() Path[]?
            + getCompletePathVertices(): Vertex[]?
            + getIncompletePaths(): Path[]
        }

        Pathfinding o-- IDataStructure : "<i>data</i>"

        interface IDataStructure {
            + size: number
            + push(v: Vertex)
            + peek(): Vertex?
            + pop(): Vertex?
            + remove(v: Vertex): boolean
            + elements(): Iterable<Vertex>
            + clear(): void
        }

        IDataStructure <|-- HeapDataStructure
        IDataStructure <|-- QueueDataStructure

        package algorithms {
            class BFS
            class Dijkstra
            class Greedy
            class AStar
        }

        abstract class HeapPathfinding

        Pathfinding <|-- BFS
        Pathfinding <|-- HeapPathfinding
        HeapPathfinding <|-- Greedy
        HeapPathfinding <|-- Dijkstra
        HeapPathfinding <|-- AStar
    }

    class Time {
        + hours: number {readOnly}
        + minutes: number {readOnly}
        + seconds: number {readOnly}
        + Time(hours: number, minutes: number, seconds: number)
        + valueOf(): number
        + toString({hours = true, seconds = true}): string
        + before(other: Time): boolean
        + after(other: Time): boolean
        + equals(other: Time): boolean
        + compare(other: Time): number
        + plus(other: Time): Time
        + minus(other: Time): Time
    }

    class Coordinate {
        + latLon: [number, number] {readOnly}
        + lat: number {readOnly}
        + lon: number {readOnly}
        + Coordinate(lat: number, lon: number)
        + distanceMeters(other: Coordinate): number
    }

    class Vertex {
        + id: number {readOnly}
        + location: Coordinate {readOnly}
        + stepsFromRoot: number {readOnly}
        + visited: boolean
        + distance: number?
        + heuristic: number
        + weightedHeuristic: number {readOnly}
        + parentEdge: DirectedWeightedEdge
        + parentVertex: Vertex? {readOnly}
        + isRoot: boolean {readOnly}
        + stop: Stop
    }

    class Graph {
        + vertices: Map<string, Vertex> {readOnly}
        + Graph(time: Time)
        + getVertex(id: string): Vertex?
        + getOrAddVertex(stop: Stop): Vertex
    }
    Vertex o-- Coordinate : "location {readOnly}"
    Vertex o-- Time : "time {readOnly}"
    Graph o-- Time : "time {readOnly}"
    Graph -- Vertex

    Vertex o-- "*" DirectedWeightedEdge : "inEdges {readOnly}"
    Vertex o-- "*" DirectedWeightedEdge : "transitEdges {readOnly}"
    Vertex o-- "*" DirectedWeightedEdge : "walkingEdges {readOnly}"

    class DirectedWeightedEdge {
        + path: Coordinate[] {readOnly}
        + weight: number {readOnly}
        + source: Vertex {readOnly}
        + target: Vertex {readOnly}
        + visited: boolean
    }
}

@enduml
