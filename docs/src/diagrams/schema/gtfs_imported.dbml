// This schema is a merged version of the schema generated by node-gtfs
// and the one generated from BKK's GTFS feed,
// in order to more closely reflect the database
// (eg. by setting the type to null where no data is provided)
// Docs: https://dbml.dbdiagram.io/docs

Table agency{
  agency_id text [pk]
  agency_name text [not null]
  agency_url text [not null]
  agency_timezone text [not null]
  agency_lang text
  agency_phone text
  agency_fare_url null
  agency_email null
}

Table stops{
  stop_id text [pk]
  stop_code text
  stop_name text
  stop_lat real
  stop_lon real
  location_type integer
  parent_station text
  wheelchair_boarding integer
  tts_stop_name null
  stop_desc null
  zone_id null
  stop_url null
  stop_timezone null
  level_id null
  platform_code null
  Indexes {
    parent_station [name: "idx_stops_parent_station"]
  }
}

Table routes{
  route_id text [pk, not null]
  agency_id text
  route_short_name text
  route_type integer [not null]
  route_desc text
  route_color text
  route_text_color text
  route_sort_order integer
  route_long_name null
  route_url null
  continuous_pickup null
  continuous_drop_off null
  network_id null
}

Table trips{
  route_id text [not null]
  trip_id text [pk, not null]
  service_id text [not null]
  trip_headsign text
  direction_id integer
  block_id text
  shape_id text
  wheelchair_accessible integer
  bikes_allowed integer
  trip_short_name null
  Indexes {
    block_id [name: "idx_trips_block_id"]
    direction_id [name: "idx_trips_direction_id"]
    route_id [name: "idx_trips_route_id"]
    service_id [name: "idx_trips_service_id"]
    shape_id [name: "idx_trips_shape_id"]
  }
}

Table stop_times{
  trip_id text [not null]
  arrival_time text
  arrival_timestamp integer
  departure_time text
  departure_timestamp integer
  stop_id text [not null]
  stop_sequence integer [not null]
  stop_headsign text
  pickup_type integer
  drop_off_type integer
  shape_dist_traveled real
  location_id null
  location_group_id null
  start_pickup_drop_off_window null
  start_pickup_drop_off_window_timestamp null
  continuous_pickup null
  continuous_drop_off null
  timepoint null
  pickup_booking_rule_id null
  drop_off_booking_rule_id null
  Indexes {
    (trip_id, stop_sequence) [pk]
    arrival_timestamp [name: "idx_stop_times_arrival_timestamp"]
    departure_timestamp [name: "idx_stop_times_departure_timestamp"]
    drop_off_booking_rule_id [name: "idx_stop_times_drop_off_booking_rule_id"]
    location_group_id [name: "idx_stop_times_location_group_id"]
    location_id [name: "idx_stop_times_location_id"]
    pickup_booking_rule_id [name: "idx_stop_times_pickup_booking_rule_id"]
    start_pickup_drop_off_window_timestamp [name: "idx_stop_times_start_pickup_drop_off_window_timestamp"]
    stop_id [name: "idx_stop_times_stop_id"]
  }
}

Table calendar_dates{
  service_id text [not null]
  date date [not null]
  exception_type integer [not null]
  holiday_name text // null
  Indexes {
    (service_id, date) [pk]
    exception_type [name: "idx_calendar_dates_exception_type"]
  }
}

Table shapes{
  shape_id text [not null]
  shape_pt_sequence integer [not null]
  shape_pt_lat real [not null]
  shape_pt_lon real [not null]
  shape_dist_traveled real
  Indexes {
    (shape_id, shape_pt_sequence) [pk]
  }
}

Table pathways{
  pathway_id text [pk, not null]
  from_stop_id text [not null]
  to_stop_id text [not null]
  pathway_mode integer [not null]
  is_bidirectional boolean [not null]
  traversal_time integer
  length null
  stair_count null
  max_slope null
  min_width null
  signposted_as null
  reversed_signposted_as null
}

Table feed_info{
  feed_publisher_name text [not null]
  feed_publisher_url text [not null]
  feed_lang text [not null]
  feed_start_date date
  feed_end_date date
  feed_version text
  default_lang null
  feed_contact_email null
  feed_contact_url null
}

Ref: agency.agency_id < routes.agency_id [update: cascade, delete: cascade]
Ref: routes.route_id < trips.route_id [update: cascade, delete: cascade]
Ref: trips.trip_id < stop_times.trip_id [update: cascade, delete: cascade]
Ref: trips.service_id <> calendar_dates.service_id
Ref: trips.shape_id <> shapes.shape_id
Ref: stop_times.shape_dist_traveled <> shapes.shape_dist_traveled
Ref: stops.stop_id < stop_times.stop_id [update: cascade, delete: cascade]
Ref: stops.stop_id < pathways.from_stop_id [update: cascade, delete: cascade]
Ref: stops.stop_id < pathways.to_stop_id [update: cascade, delete: cascade]
