{
	"info": {
		"_postman_id": "604dc46e-8a7f-40cd-b475-2add619d8df7",
		"name": "BKWay API specification",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31408638"
	},
	"item": [
		{
			"name": "stops",
			"item": [
				{
					"name": "{stopId}",
					"item": [
						{
							"name": "neighbors",
							"item": [
								{
									"name": "neighbors test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test for response status code\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test for response body properties\r",
													"pm.test(\"Response body has stopId\", function () {\r",
													"    pm.expect(pm.response.json()[0]).to.have.property('stop');\r",
													"    pm.expect(pm.response.json()[0].stop).to.have.property('stopId');\r",
													"});\r",
													"\r",
													"pm.test(\"Response body has routeId\", function () {\r",
													"    pm.expect(pm.response.json()[0]).to.have.property('trip');\r",
													"    pm.expect(pm.response.json()[0].trip).to.have.property('routeId');\r",
													"});\r",
													"\r",
													"// Test for response headers\r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"// Test for Content-Type header\r",
													"pm.test(\"Content-Type is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"// Test for response body properties\r",
													"pm.test(\"Response has 1 item\", function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('array').that.has.lengthOf(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Stop's stopId is F00956\", function () {\r",
													"    pm.expect(pm.response.json()[0]).to.have.property('stop');\r",
													"    pm.expect(pm.response.json()[0].stop).to.have.property('stopId', 'F00956');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stops/:stopId/neighbors?time=12:00:00",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stops",
												":stopId",
												"neighbors"
											],
											"query": [
												{
													"key": "time",
													"value": "12:00:00",
													"description": "(Required) Departure time (HH:mm:ss)"
												}
											],
											"variable": [
												{
													"key": "stopId",
													"value": "F00954",
													"description": "(Required) Stop ID"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/neighbors?time=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"neighbors"
													],
													"query": [
														{
															"key": "time",
															"value": "<string>",
															"description": "(Required) Departure time (HH:mm:ss)"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"stop\": {\n      \"stopId\": \"<string>\",\n      \"stopCode\": \"<string>\",\n      \"stopName\": \"<string>\",\n      \"ttsStopName\": \"<string>\",\n      \"stopDesc\": \"<string>\",\n      \"stopLat\": \"<number>\",\n      \"stopLon\": \"<number>\",\n      \"zoneId\": \"<string>\",\n      \"stopUrl\": \"<string>\",\n      \"locationType\": 4,\n      \"parentStation\": \"<string>\",\n      \"stopTimezone\": \"<string>\",\n      \"wheelchairBoarding\": 0,\n      \"levelId\": \"<string>\",\n      \"platformCode\": \"<string>\"\n    },\n    \"trip\": {\n      \"tripId\": \"<string>\",\n      \"routeId\": \"<string>\",\n      \"serviceId\": \"<string>\",\n      \"tripHeadsign\": \"<string>\",\n      \"directionId\": 0,\n      \"shapeId\": \"<string>\",\n      \"wheelchairAccessible\": 0,\n      \"bikesAllowed\": 0,\n      \"tripShortName\": \"<string>\",\n      \"blockId\": \"<string>\"\n    },\n    \"departureTime\": {\n      \"tripId\": \"<string>\",\n      \"arrivalTime\": \"<string>\",\n      \"arrivalTimestamp\": \"<string>\",\n      \"departureTime\": \"<string>\",\n      \"departureTimestamp\": \"<string>\",\n      \"stopId\": \"<string>\",\n      \"stopSequence\": \"<integer>\",\n      \"shapeDistTraveled\": \"<number>\",\n      \"locationGroupId\": \"<string>\",\n      \"locationId\": \"<string>\",\n      \"stopHeadsign\": \"<string>\",\n      \"startPickupDropoffWindow\": \"<string>\",\n      \"startPickupDropoffWindowTimestamp\": \"<string>\",\n      \"pickupType\": 1,\n      \"dropOffType\": 3,\n      \"continuousPickup\": 3,\n      \"continuousDropoff\": 3,\n      \"timepoint\": 0,\n      \"pickupBookingRuleId\": \"<string>\",\n      \"dropOffBookingRuleId\": \"<string>\"\n    },\n    \"arrivalTime\": {\n      \"tripId\": \"<string>\",\n      \"arrivalTime\": \"<string>\",\n      \"arrivalTimestamp\": \"<string>\",\n      \"departureTime\": \"<string>\",\n      \"departureTimestamp\": \"<string>\",\n      \"stopId\": \"<string>\",\n      \"stopSequence\": \"<integer>\",\n      \"shapeDistTraveled\": \"<number>\",\n      \"locationGroupId\": \"<string>\",\n      \"locationId\": \"<string>\",\n      \"stopHeadsign\": \"<string>\",\n      \"startPickupDropoffWindow\": \"<string>\",\n      \"startPickupDropoffWindowTimestamp\": \"<string>\",\n      \"pickupType\": 2,\n      \"dropOffType\": 2,\n      \"continuousPickup\": 2,\n      \"continuousDropoff\": 1,\n      \"timepoint\": 0,\n      \"pickupBookingRuleId\": \"<string>\",\n      \"dropOffBookingRuleId\": \"<string>\"\n    },\n    \"route\": {\n      \"routeId\": \"<string>\",\n      \"routeType\": 1,\n      \"agencyId\": \"<string>\",\n      \"routeShortName\": \"<string>\",\n      \"routeLongName\": \"<string>\",\n      \"routeDesc\": \"<string>\",\n      \"routeUrl\": \"<string>\",\n      \"routeColor\": \"<string>\",\n      \"routeTextColor\": \"<string>\",\n      \"routeSortOrder\": \"<integer>\",\n      \"continuousPickup\": 3,\n      \"continuousDropoff\": 1,\n      \"networkId\": \"<string>\"\n    }\n  },\n  {\n    \"stop\": {\n      \"stopId\": \"<string>\",\n      \"stopCode\": \"<string>\",\n      \"stopName\": \"<string>\",\n      \"ttsStopName\": \"<string>\",\n      \"stopDesc\": \"<string>\",\n      \"stopLat\": \"<number>\",\n      \"stopLon\": \"<number>\",\n      \"zoneId\": \"<string>\",\n      \"stopUrl\": \"<string>\",\n      \"locationType\": 4,\n      \"parentStation\": \"<string>\",\n      \"stopTimezone\": \"<string>\",\n      \"wheelchairBoarding\": 1,\n      \"levelId\": \"<string>\",\n      \"platformCode\": \"<string>\"\n    },\n    \"trip\": {\n      \"tripId\": \"<string>\",\n      \"routeId\": \"<string>\",\n      \"serviceId\": \"<string>\",\n      \"tripHeadsign\": \"<string>\",\n      \"directionId\": 0,\n      \"shapeId\": \"<string>\",\n      \"wheelchairAccessible\": 1,\n      \"bikesAllowed\": 0,\n      \"tripShortName\": \"<string>\",\n      \"blockId\": \"<string>\"\n    },\n    \"departureTime\": {\n      \"tripId\": \"<string>\",\n      \"arrivalTime\": \"<string>\",\n      \"arrivalTimestamp\": \"<string>\",\n      \"departureTime\": \"<string>\",\n      \"departureTimestamp\": \"<string>\",\n      \"stopId\": \"<string>\",\n      \"stopSequence\": \"<integer>\",\n      \"shapeDistTraveled\": \"<number>\",\n      \"locationGroupId\": \"<string>\",\n      \"locationId\": \"<string>\",\n      \"stopHeadsign\": \"<string>\",\n      \"startPickupDropoffWindow\": \"<string>\",\n      \"startPickupDropoffWindowTimestamp\": \"<string>\",\n      \"pickupType\": 3,\n      \"dropOffType\": 0,\n      \"continuousPickup\": 2,\n      \"continuousDropoff\": 2,\n      \"timepoint\": 0,\n      \"pickupBookingRuleId\": \"<string>\",\n      \"dropOffBookingRuleId\": \"<string>\"\n    },\n    \"arrivalTime\": {\n      \"tripId\": \"<string>\",\n      \"arrivalTime\": \"<string>\",\n      \"arrivalTimestamp\": \"<string>\",\n      \"departureTime\": \"<string>\",\n      \"departureTimestamp\": \"<string>\",\n      \"stopId\": \"<string>\",\n      \"stopSequence\": \"<integer>\",\n      \"shapeDistTraveled\": \"<number>\",\n      \"locationGroupId\": \"<string>\",\n      \"locationId\": \"<string>\",\n      \"stopHeadsign\": \"<string>\",\n      \"startPickupDropoffWindow\": \"<string>\",\n      \"startPickupDropoffWindowTimestamp\": \"<string>\",\n      \"pickupType\": 3,\n      \"dropOffType\": 3,\n      \"continuousPickup\": 3,\n      \"continuousDropoff\": 2,\n      \"timepoint\": 0,\n      \"pickupBookingRuleId\": \"<string>\",\n      \"dropOffBookingRuleId\": \"<string>\"\n    },\n    \"route\": {\n      \"routeId\": \"<string>\",\n      \"routeType\": 109,\n      \"agencyId\": \"<string>\",\n      \"routeShortName\": \"<string>\",\n      \"routeLongName\": \"<string>\",\n      \"routeDesc\": \"<string>\",\n      \"routeUrl\": \"<string>\",\n      \"routeColor\": \"<string>\",\n      \"routeTextColor\": \"<string>\",\n      \"routeSortOrder\": \"<integer>\",\n      \"continuousPickup\": 2,\n      \"continuousDropoff\": 1,\n      \"networkId\": \"<string>\"\n    }\n  }\n]"
										},
										{
											"name": "BAD REQUEST",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/neighbors?time=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"neighbors"
													],
													"query": [
														{
															"key": "time",
															"value": "<string>",
															"description": "(Required) Departure time (HH:mm:ss)"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "NOT FOUND",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/neighbors?time=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"neighbors"
													],
													"query": [
														{
															"key": "time",
															"value": "<string>",
															"description": "(Required) Departure time (HH:mm:ss)"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "neighbors test 24:00",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test for response status code\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test for response headers\r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"// Test for Content-Type header\r",
													"pm.test(\"Content-Type is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"// Test for response body properties\r",
													"pm.test(\"Response has 1 item\", function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('array').that.has.lengthOf(0);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stops/:stopId/neighbors?time=24:00:00",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stops",
												":stopId",
												"neighbors"
											],
											"query": [
												{
													"key": "time",
													"value": "24:00:00",
													"description": "(Required) Departure time (HH:mm:ss)"
												}
											],
											"variable": [
												{
													"key": "stopId",
													"value": "F00954",
													"description": "(Required) Stop ID"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/neighbors?time=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"neighbors"
													],
													"query": [
														{
															"key": "time",
															"value": "<string>",
															"description": "(Required) Departure time (HH:mm:ss)"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"stop\": {\n      \"stopId\": \"<string>\",\n      \"stopCode\": \"<string>\",\n      \"stopName\": \"<string>\",\n      \"ttsStopName\": \"<string>\",\n      \"stopDesc\": \"<string>\",\n      \"stopLat\": \"<number>\",\n      \"stopLon\": \"<number>\",\n      \"zoneId\": \"<string>\",\n      \"stopUrl\": \"<string>\",\n      \"locationType\": 4,\n      \"parentStation\": \"<string>\",\n      \"stopTimezone\": \"<string>\",\n      \"wheelchairBoarding\": 0,\n      \"levelId\": \"<string>\",\n      \"platformCode\": \"<string>\"\n    },\n    \"trip\": {\n      \"tripId\": \"<string>\",\n      \"routeId\": \"<string>\",\n      \"serviceId\": \"<string>\",\n      \"tripHeadsign\": \"<string>\",\n      \"directionId\": 0,\n      \"shapeId\": \"<string>\",\n      \"wheelchairAccessible\": 0,\n      \"bikesAllowed\": 0,\n      \"tripShortName\": \"<string>\",\n      \"blockId\": \"<string>\"\n    },\n    \"departureTime\": {\n      \"tripId\": \"<string>\",\n      \"arrivalTime\": \"<string>\",\n      \"arrivalTimestamp\": \"<string>\",\n      \"departureTime\": \"<string>\",\n      \"departureTimestamp\": \"<string>\",\n      \"stopId\": \"<string>\",\n      \"stopSequence\": \"<integer>\",\n      \"shapeDistTraveled\": \"<number>\",\n      \"locationGroupId\": \"<string>\",\n      \"locationId\": \"<string>\",\n      \"stopHeadsign\": \"<string>\",\n      \"startPickupDropoffWindow\": \"<string>\",\n      \"startPickupDropoffWindowTimestamp\": \"<string>\",\n      \"pickupType\": 1,\n      \"dropOffType\": 3,\n      \"continuousPickup\": 3,\n      \"continuousDropoff\": 3,\n      \"timepoint\": 0,\n      \"pickupBookingRuleId\": \"<string>\",\n      \"dropOffBookingRuleId\": \"<string>\"\n    },\n    \"arrivalTime\": {\n      \"tripId\": \"<string>\",\n      \"arrivalTime\": \"<string>\",\n      \"arrivalTimestamp\": \"<string>\",\n      \"departureTime\": \"<string>\",\n      \"departureTimestamp\": \"<string>\",\n      \"stopId\": \"<string>\",\n      \"stopSequence\": \"<integer>\",\n      \"shapeDistTraveled\": \"<number>\",\n      \"locationGroupId\": \"<string>\",\n      \"locationId\": \"<string>\",\n      \"stopHeadsign\": \"<string>\",\n      \"startPickupDropoffWindow\": \"<string>\",\n      \"startPickupDropoffWindowTimestamp\": \"<string>\",\n      \"pickupType\": 2,\n      \"dropOffType\": 2,\n      \"continuousPickup\": 2,\n      \"continuousDropoff\": 1,\n      \"timepoint\": 0,\n      \"pickupBookingRuleId\": \"<string>\",\n      \"dropOffBookingRuleId\": \"<string>\"\n    },\n    \"route\": {\n      \"routeId\": \"<string>\",\n      \"routeType\": 1,\n      \"agencyId\": \"<string>\",\n      \"routeShortName\": \"<string>\",\n      \"routeLongName\": \"<string>\",\n      \"routeDesc\": \"<string>\",\n      \"routeUrl\": \"<string>\",\n      \"routeColor\": \"<string>\",\n      \"routeTextColor\": \"<string>\",\n      \"routeSortOrder\": \"<integer>\",\n      \"continuousPickup\": 3,\n      \"continuousDropoff\": 1,\n      \"networkId\": \"<string>\"\n    }\n  },\n  {\n    \"stop\": {\n      \"stopId\": \"<string>\",\n      \"stopCode\": \"<string>\",\n      \"stopName\": \"<string>\",\n      \"ttsStopName\": \"<string>\",\n      \"stopDesc\": \"<string>\",\n      \"stopLat\": \"<number>\",\n      \"stopLon\": \"<number>\",\n      \"zoneId\": \"<string>\",\n      \"stopUrl\": \"<string>\",\n      \"locationType\": 4,\n      \"parentStation\": \"<string>\",\n      \"stopTimezone\": \"<string>\",\n      \"wheelchairBoarding\": 1,\n      \"levelId\": \"<string>\",\n      \"platformCode\": \"<string>\"\n    },\n    \"trip\": {\n      \"tripId\": \"<string>\",\n      \"routeId\": \"<string>\",\n      \"serviceId\": \"<string>\",\n      \"tripHeadsign\": \"<string>\",\n      \"directionId\": 0,\n      \"shapeId\": \"<string>\",\n      \"wheelchairAccessible\": 1,\n      \"bikesAllowed\": 0,\n      \"tripShortName\": \"<string>\",\n      \"blockId\": \"<string>\"\n    },\n    \"departureTime\": {\n      \"tripId\": \"<string>\",\n      \"arrivalTime\": \"<string>\",\n      \"arrivalTimestamp\": \"<string>\",\n      \"departureTime\": \"<string>\",\n      \"departureTimestamp\": \"<string>\",\n      \"stopId\": \"<string>\",\n      \"stopSequence\": \"<integer>\",\n      \"shapeDistTraveled\": \"<number>\",\n      \"locationGroupId\": \"<string>\",\n      \"locationId\": \"<string>\",\n      \"stopHeadsign\": \"<string>\",\n      \"startPickupDropoffWindow\": \"<string>\",\n      \"startPickupDropoffWindowTimestamp\": \"<string>\",\n      \"pickupType\": 3,\n      \"dropOffType\": 0,\n      \"continuousPickup\": 2,\n      \"continuousDropoff\": 2,\n      \"timepoint\": 0,\n      \"pickupBookingRuleId\": \"<string>\",\n      \"dropOffBookingRuleId\": \"<string>\"\n    },\n    \"arrivalTime\": {\n      \"tripId\": \"<string>\",\n      \"arrivalTime\": \"<string>\",\n      \"arrivalTimestamp\": \"<string>\",\n      \"departureTime\": \"<string>\",\n      \"departureTimestamp\": \"<string>\",\n      \"stopId\": \"<string>\",\n      \"stopSequence\": \"<integer>\",\n      \"shapeDistTraveled\": \"<number>\",\n      \"locationGroupId\": \"<string>\",\n      \"locationId\": \"<string>\",\n      \"stopHeadsign\": \"<string>\",\n      \"startPickupDropoffWindow\": \"<string>\",\n      \"startPickupDropoffWindowTimestamp\": \"<string>\",\n      \"pickupType\": 3,\n      \"dropOffType\": 3,\n      \"continuousPickup\": 3,\n      \"continuousDropoff\": 2,\n      \"timepoint\": 0,\n      \"pickupBookingRuleId\": \"<string>\",\n      \"dropOffBookingRuleId\": \"<string>\"\n    },\n    \"route\": {\n      \"routeId\": \"<string>\",\n      \"routeType\": 109,\n      \"agencyId\": \"<string>\",\n      \"routeShortName\": \"<string>\",\n      \"routeLongName\": \"<string>\",\n      \"routeDesc\": \"<string>\",\n      \"routeUrl\": \"<string>\",\n      \"routeColor\": \"<string>\",\n      \"routeTextColor\": \"<string>\",\n      \"routeSortOrder\": \"<integer>\",\n      \"continuousPickup\": 2,\n      \"continuousDropoff\": 1,\n      \"networkId\": \"<string>\"\n    }\n  }\n]"
										},
										{
											"name": "BAD REQUEST",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/neighbors?time=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"neighbors"
													],
													"query": [
														{
															"key": "time",
															"value": "<string>",
															"description": "(Required) Departure time (HH:mm:ss)"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "NOT FOUND",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/neighbors?time=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"neighbors"
													],
													"query": [
														{
															"key": "time",
															"value": "<string>",
															"description": "(Required) Departure time (HH:mm:ss)"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "neighbors test astoria",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test for response status code\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test for response body properties\r",
													"pm.test(\"Response body has stopId\", function () {\r",
													"    pm.expect(pm.response.json()[0]).to.have.property('stop');\r",
													"    pm.expect(pm.response.json()[0].stop).to.have.property('stopId');\r",
													"});\r",
													"\r",
													"pm.test(\"Response body has routeId\", function () {\r",
													"    pm.expect(pm.response.json()[0]).to.have.property('trip');\r",
													"    pm.expect(pm.response.json()[0].trip).to.have.property('routeId');\r",
													"});\r",
													"\r",
													"// Test for response headers\r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"// Test for Content-Type header\r",
													"pm.test(\"Content-Type is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"// Test for response body properties\r",
													"pm.test(\"Response has 1 item\", function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('array').that.has.lengthOf(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Stop's stopId is F00956\", function () {\r",
													"    pm.expect(pm.response.json()[0]).to.have.property('stop');\r",
													"    pm.expect(pm.response.json()[0].stop).to.have.property('stopId', 'F01019');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stops/:stopId/neighbors?time=12:00:00",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stops",
												":stopId",
												"neighbors"
											],
											"query": [
												{
													"key": "time",
													"value": "12:00:00",
													"description": "(Required) Departure time (HH:mm:ss)"
												}
											],
											"variable": [
												{
													"key": "stopId",
													"value": "F00961",
													"description": "(Required) Stop ID"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/neighbors?time=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"neighbors"
													],
													"query": [
														{
															"key": "time",
															"value": "<string>",
															"description": "(Required) Departure time (HH:mm:ss)"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"stop\": {\n      \"stopId\": \"<string>\",\n      \"stopCode\": \"<string>\",\n      \"stopName\": \"<string>\",\n      \"ttsStopName\": \"<string>\",\n      \"stopDesc\": \"<string>\",\n      \"stopLat\": \"<number>\",\n      \"stopLon\": \"<number>\",\n      \"zoneId\": \"<string>\",\n      \"stopUrl\": \"<string>\",\n      \"locationType\": 4,\n      \"parentStation\": \"<string>\",\n      \"stopTimezone\": \"<string>\",\n      \"wheelchairBoarding\": 0,\n      \"levelId\": \"<string>\",\n      \"platformCode\": \"<string>\"\n    },\n    \"trip\": {\n      \"tripId\": \"<string>\",\n      \"routeId\": \"<string>\",\n      \"serviceId\": \"<string>\",\n      \"tripHeadsign\": \"<string>\",\n      \"directionId\": 0,\n      \"shapeId\": \"<string>\",\n      \"wheelchairAccessible\": 0,\n      \"bikesAllowed\": 0,\n      \"tripShortName\": \"<string>\",\n      \"blockId\": \"<string>\"\n    },\n    \"departureTime\": {\n      \"tripId\": \"<string>\",\n      \"arrivalTime\": \"<string>\",\n      \"arrivalTimestamp\": \"<string>\",\n      \"departureTime\": \"<string>\",\n      \"departureTimestamp\": \"<string>\",\n      \"stopId\": \"<string>\",\n      \"stopSequence\": \"<integer>\",\n      \"shapeDistTraveled\": \"<number>\",\n      \"locationGroupId\": \"<string>\",\n      \"locationId\": \"<string>\",\n      \"stopHeadsign\": \"<string>\",\n      \"startPickupDropoffWindow\": \"<string>\",\n      \"startPickupDropoffWindowTimestamp\": \"<string>\",\n      \"pickupType\": 1,\n      \"dropOffType\": 3,\n      \"continuousPickup\": 3,\n      \"continuousDropoff\": 3,\n      \"timepoint\": 0,\n      \"pickupBookingRuleId\": \"<string>\",\n      \"dropOffBookingRuleId\": \"<string>\"\n    },\n    \"arrivalTime\": {\n      \"tripId\": \"<string>\",\n      \"arrivalTime\": \"<string>\",\n      \"arrivalTimestamp\": \"<string>\",\n      \"departureTime\": \"<string>\",\n      \"departureTimestamp\": \"<string>\",\n      \"stopId\": \"<string>\",\n      \"stopSequence\": \"<integer>\",\n      \"shapeDistTraveled\": \"<number>\",\n      \"locationGroupId\": \"<string>\",\n      \"locationId\": \"<string>\",\n      \"stopHeadsign\": \"<string>\",\n      \"startPickupDropoffWindow\": \"<string>\",\n      \"startPickupDropoffWindowTimestamp\": \"<string>\",\n      \"pickupType\": 2,\n      \"dropOffType\": 2,\n      \"continuousPickup\": 2,\n      \"continuousDropoff\": 1,\n      \"timepoint\": 0,\n      \"pickupBookingRuleId\": \"<string>\",\n      \"dropOffBookingRuleId\": \"<string>\"\n    },\n    \"route\": {\n      \"routeId\": \"<string>\",\n      \"routeType\": 1,\n      \"agencyId\": \"<string>\",\n      \"routeShortName\": \"<string>\",\n      \"routeLongName\": \"<string>\",\n      \"routeDesc\": \"<string>\",\n      \"routeUrl\": \"<string>\",\n      \"routeColor\": \"<string>\",\n      \"routeTextColor\": \"<string>\",\n      \"routeSortOrder\": \"<integer>\",\n      \"continuousPickup\": 3,\n      \"continuousDropoff\": 1,\n      \"networkId\": \"<string>\"\n    }\n  },\n  {\n    \"stop\": {\n      \"stopId\": \"<string>\",\n      \"stopCode\": \"<string>\",\n      \"stopName\": \"<string>\",\n      \"ttsStopName\": \"<string>\",\n      \"stopDesc\": \"<string>\",\n      \"stopLat\": \"<number>\",\n      \"stopLon\": \"<number>\",\n      \"zoneId\": \"<string>\",\n      \"stopUrl\": \"<string>\",\n      \"locationType\": 4,\n      \"parentStation\": \"<string>\",\n      \"stopTimezone\": \"<string>\",\n      \"wheelchairBoarding\": 1,\n      \"levelId\": \"<string>\",\n      \"platformCode\": \"<string>\"\n    },\n    \"trip\": {\n      \"tripId\": \"<string>\",\n      \"routeId\": \"<string>\",\n      \"serviceId\": \"<string>\",\n      \"tripHeadsign\": \"<string>\",\n      \"directionId\": 0,\n      \"shapeId\": \"<string>\",\n      \"wheelchairAccessible\": 1,\n      \"bikesAllowed\": 0,\n      \"tripShortName\": \"<string>\",\n      \"blockId\": \"<string>\"\n    },\n    \"departureTime\": {\n      \"tripId\": \"<string>\",\n      \"arrivalTime\": \"<string>\",\n      \"arrivalTimestamp\": \"<string>\",\n      \"departureTime\": \"<string>\",\n      \"departureTimestamp\": \"<string>\",\n      \"stopId\": \"<string>\",\n      \"stopSequence\": \"<integer>\",\n      \"shapeDistTraveled\": \"<number>\",\n      \"locationGroupId\": \"<string>\",\n      \"locationId\": \"<string>\",\n      \"stopHeadsign\": \"<string>\",\n      \"startPickupDropoffWindow\": \"<string>\",\n      \"startPickupDropoffWindowTimestamp\": \"<string>\",\n      \"pickupType\": 3,\n      \"dropOffType\": 0,\n      \"continuousPickup\": 2,\n      \"continuousDropoff\": 2,\n      \"timepoint\": 0,\n      \"pickupBookingRuleId\": \"<string>\",\n      \"dropOffBookingRuleId\": \"<string>\"\n    },\n    \"arrivalTime\": {\n      \"tripId\": \"<string>\",\n      \"arrivalTime\": \"<string>\",\n      \"arrivalTimestamp\": \"<string>\",\n      \"departureTime\": \"<string>\",\n      \"departureTimestamp\": \"<string>\",\n      \"stopId\": \"<string>\",\n      \"stopSequence\": \"<integer>\",\n      \"shapeDistTraveled\": \"<number>\",\n      \"locationGroupId\": \"<string>\",\n      \"locationId\": \"<string>\",\n      \"stopHeadsign\": \"<string>\",\n      \"startPickupDropoffWindow\": \"<string>\",\n      \"startPickupDropoffWindowTimestamp\": \"<string>\",\n      \"pickupType\": 3,\n      \"dropOffType\": 3,\n      \"continuousPickup\": 3,\n      \"continuousDropoff\": 2,\n      \"timepoint\": 0,\n      \"pickupBookingRuleId\": \"<string>\",\n      \"dropOffBookingRuleId\": \"<string>\"\n    },\n    \"route\": {\n      \"routeId\": \"<string>\",\n      \"routeType\": 109,\n      \"agencyId\": \"<string>\",\n      \"routeShortName\": \"<string>\",\n      \"routeLongName\": \"<string>\",\n      \"routeDesc\": \"<string>\",\n      \"routeUrl\": \"<string>\",\n      \"routeColor\": \"<string>\",\n      \"routeTextColor\": \"<string>\",\n      \"routeSortOrder\": \"<integer>\",\n      \"continuousPickup\": 2,\n      \"continuousDropoff\": 1,\n      \"networkId\": \"<string>\"\n    }\n  }\n]"
										},
										{
											"name": "BAD REQUEST",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/neighbors?time=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"neighbors"
													],
													"query": [
														{
															"key": "time",
															"value": "<string>",
															"description": "(Required) Departure time (HH:mm:ss)"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "NOT FOUND",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/neighbors?time=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"neighbors"
													],
													"query": [
														{
															"key": "time",
															"value": "<string>",
															"description": "(Required) Departure time (HH:mm:ss)"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "neighbors test empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test for response status code\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test for response headers\r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"// Test for Content-Type header\r",
													"pm.test(\"Content-Type is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"// Test for response body properties\r",
													"pm.test(\"Response has 1 item\", function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('array').that.has.lengthOf(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stops/:stopId/neighbors?time=12:00:00",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stops",
												":stopId",
												"neighbors"
											],
											"query": [
												{
													"key": "time",
													"value": "12:00:00",
													"description": "(Required) Departure time (HH:mm:ss)"
												}
											],
											"variable": [
												{
													"key": "stopId",
													"value": "007884",
													"description": "(Required) Stop ID"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/neighbors?time=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"neighbors"
													],
													"query": [
														{
															"key": "time",
															"value": "<string>",
															"description": "(Required) Departure time (HH:mm:ss)"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"stop\": {\n      \"stopId\": \"<string>\",\n      \"stopCode\": \"<string>\",\n      \"stopName\": \"<string>\",\n      \"ttsStopName\": \"<string>\",\n      \"stopDesc\": \"<string>\",\n      \"stopLat\": \"<number>\",\n      \"stopLon\": \"<number>\",\n      \"zoneId\": \"<string>\",\n      \"stopUrl\": \"<string>\",\n      \"locationType\": 4,\n      \"parentStation\": \"<string>\",\n      \"stopTimezone\": \"<string>\",\n      \"wheelchairBoarding\": 0,\n      \"levelId\": \"<string>\",\n      \"platformCode\": \"<string>\"\n    },\n    \"trip\": {\n      \"tripId\": \"<string>\",\n      \"routeId\": \"<string>\",\n      \"serviceId\": \"<string>\",\n      \"tripHeadsign\": \"<string>\",\n      \"directionId\": 0,\n      \"shapeId\": \"<string>\",\n      \"wheelchairAccessible\": 0,\n      \"bikesAllowed\": 0,\n      \"tripShortName\": \"<string>\",\n      \"blockId\": \"<string>\"\n    },\n    \"departureTime\": {\n      \"tripId\": \"<string>\",\n      \"arrivalTime\": \"<string>\",\n      \"arrivalTimestamp\": \"<string>\",\n      \"departureTime\": \"<string>\",\n      \"departureTimestamp\": \"<string>\",\n      \"stopId\": \"<string>\",\n      \"stopSequence\": \"<integer>\",\n      \"shapeDistTraveled\": \"<number>\",\n      \"locationGroupId\": \"<string>\",\n      \"locationId\": \"<string>\",\n      \"stopHeadsign\": \"<string>\",\n      \"startPickupDropoffWindow\": \"<string>\",\n      \"startPickupDropoffWindowTimestamp\": \"<string>\",\n      \"pickupType\": 1,\n      \"dropOffType\": 3,\n      \"continuousPickup\": 3,\n      \"continuousDropoff\": 3,\n      \"timepoint\": 0,\n      \"pickupBookingRuleId\": \"<string>\",\n      \"dropOffBookingRuleId\": \"<string>\"\n    },\n    \"arrivalTime\": {\n      \"tripId\": \"<string>\",\n      \"arrivalTime\": \"<string>\",\n      \"arrivalTimestamp\": \"<string>\",\n      \"departureTime\": \"<string>\",\n      \"departureTimestamp\": \"<string>\",\n      \"stopId\": \"<string>\",\n      \"stopSequence\": \"<integer>\",\n      \"shapeDistTraveled\": \"<number>\",\n      \"locationGroupId\": \"<string>\",\n      \"locationId\": \"<string>\",\n      \"stopHeadsign\": \"<string>\",\n      \"startPickupDropoffWindow\": \"<string>\",\n      \"startPickupDropoffWindowTimestamp\": \"<string>\",\n      \"pickupType\": 2,\n      \"dropOffType\": 2,\n      \"continuousPickup\": 2,\n      \"continuousDropoff\": 1,\n      \"timepoint\": 0,\n      \"pickupBookingRuleId\": \"<string>\",\n      \"dropOffBookingRuleId\": \"<string>\"\n    },\n    \"route\": {\n      \"routeId\": \"<string>\",\n      \"routeType\": 1,\n      \"agencyId\": \"<string>\",\n      \"routeShortName\": \"<string>\",\n      \"routeLongName\": \"<string>\",\n      \"routeDesc\": \"<string>\",\n      \"routeUrl\": \"<string>\",\n      \"routeColor\": \"<string>\",\n      \"routeTextColor\": \"<string>\",\n      \"routeSortOrder\": \"<integer>\",\n      \"continuousPickup\": 3,\n      \"continuousDropoff\": 1,\n      \"networkId\": \"<string>\"\n    }\n  },\n  {\n    \"stop\": {\n      \"stopId\": \"<string>\",\n      \"stopCode\": \"<string>\",\n      \"stopName\": \"<string>\",\n      \"ttsStopName\": \"<string>\",\n      \"stopDesc\": \"<string>\",\n      \"stopLat\": \"<number>\",\n      \"stopLon\": \"<number>\",\n      \"zoneId\": \"<string>\",\n      \"stopUrl\": \"<string>\",\n      \"locationType\": 4,\n      \"parentStation\": \"<string>\",\n      \"stopTimezone\": \"<string>\",\n      \"wheelchairBoarding\": 1,\n      \"levelId\": \"<string>\",\n      \"platformCode\": \"<string>\"\n    },\n    \"trip\": {\n      \"tripId\": \"<string>\",\n      \"routeId\": \"<string>\",\n      \"serviceId\": \"<string>\",\n      \"tripHeadsign\": \"<string>\",\n      \"directionId\": 0,\n      \"shapeId\": \"<string>\",\n      \"wheelchairAccessible\": 1,\n      \"bikesAllowed\": 0,\n      \"tripShortName\": \"<string>\",\n      \"blockId\": \"<string>\"\n    },\n    \"departureTime\": {\n      \"tripId\": \"<string>\",\n      \"arrivalTime\": \"<string>\",\n      \"arrivalTimestamp\": \"<string>\",\n      \"departureTime\": \"<string>\",\n      \"departureTimestamp\": \"<string>\",\n      \"stopId\": \"<string>\",\n      \"stopSequence\": \"<integer>\",\n      \"shapeDistTraveled\": \"<number>\",\n      \"locationGroupId\": \"<string>\",\n      \"locationId\": \"<string>\",\n      \"stopHeadsign\": \"<string>\",\n      \"startPickupDropoffWindow\": \"<string>\",\n      \"startPickupDropoffWindowTimestamp\": \"<string>\",\n      \"pickupType\": 3,\n      \"dropOffType\": 0,\n      \"continuousPickup\": 2,\n      \"continuousDropoff\": 2,\n      \"timepoint\": 0,\n      \"pickupBookingRuleId\": \"<string>\",\n      \"dropOffBookingRuleId\": \"<string>\"\n    },\n    \"arrivalTime\": {\n      \"tripId\": \"<string>\",\n      \"arrivalTime\": \"<string>\",\n      \"arrivalTimestamp\": \"<string>\",\n      \"departureTime\": \"<string>\",\n      \"departureTimestamp\": \"<string>\",\n      \"stopId\": \"<string>\",\n      \"stopSequence\": \"<integer>\",\n      \"shapeDistTraveled\": \"<number>\",\n      \"locationGroupId\": \"<string>\",\n      \"locationId\": \"<string>\",\n      \"stopHeadsign\": \"<string>\",\n      \"startPickupDropoffWindow\": \"<string>\",\n      \"startPickupDropoffWindowTimestamp\": \"<string>\",\n      \"pickupType\": 3,\n      \"dropOffType\": 3,\n      \"continuousPickup\": 3,\n      \"continuousDropoff\": 2,\n      \"timepoint\": 0,\n      \"pickupBookingRuleId\": \"<string>\",\n      \"dropOffBookingRuleId\": \"<string>\"\n    },\n    \"route\": {\n      \"routeId\": \"<string>\",\n      \"routeType\": 109,\n      \"agencyId\": \"<string>\",\n      \"routeShortName\": \"<string>\",\n      \"routeLongName\": \"<string>\",\n      \"routeDesc\": \"<string>\",\n      \"routeUrl\": \"<string>\",\n      \"routeColor\": \"<string>\",\n      \"routeTextColor\": \"<string>\",\n      \"routeSortOrder\": \"<integer>\",\n      \"continuousPickup\": 2,\n      \"continuousDropoff\": 1,\n      \"networkId\": \"<string>\"\n    }\n  }\n]"
										},
										{
											"name": "BAD REQUEST",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/neighbors?time=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"neighbors"
													],
													"query": [
														{
															"key": "time",
															"value": "<string>",
															"description": "(Required) Departure time (HH:mm:ss)"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "NOT FOUND",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/neighbors?time=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"neighbors"
													],
													"query": [
														{
															"key": "time",
															"value": "<string>",
															"description": "(Required) Departure time (HH:mm:ss)"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "neighbors test 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains message in JSON format\", function () {\r",
													"    pm.expect(pm.response.json().message.to.exist);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stops/:stopId/neighbors?time=12:00:00",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stops",
												":stopId",
												"neighbors"
											],
											"query": [
												{
													"key": "time",
													"value": "12:00:00",
													"description": "(Required) Departure time (HH:mm:ss)"
												}
											],
											"variable": [
												{
													"key": "stopId",
													"value": "hihi",
													"description": "(Required) Stop ID"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/neighbors?time=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"neighbors"
													],
													"query": [
														{
															"key": "time",
															"value": "<string>",
															"description": "(Required) Departure time (HH:mm:ss)"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"stop\": {\n      \"stopId\": \"<string>\",\n      \"stopCode\": \"<string>\",\n      \"stopName\": \"<string>\",\n      \"ttsStopName\": \"<string>\",\n      \"stopDesc\": \"<string>\",\n      \"stopLat\": \"<number>\",\n      \"stopLon\": \"<number>\",\n      \"zoneId\": \"<string>\",\n      \"stopUrl\": \"<string>\",\n      \"locationType\": 4,\n      \"parentStation\": \"<string>\",\n      \"stopTimezone\": \"<string>\",\n      \"wheelchairBoarding\": 0,\n      \"levelId\": \"<string>\",\n      \"platformCode\": \"<string>\"\n    },\n    \"trip\": {\n      \"tripId\": \"<string>\",\n      \"routeId\": \"<string>\",\n      \"serviceId\": \"<string>\",\n      \"tripHeadsign\": \"<string>\",\n      \"directionId\": 0,\n      \"shapeId\": \"<string>\",\n      \"wheelchairAccessible\": 0,\n      \"bikesAllowed\": 0,\n      \"tripShortName\": \"<string>\",\n      \"blockId\": \"<string>\"\n    },\n    \"departureTime\": {\n      \"tripId\": \"<string>\",\n      \"arrivalTime\": \"<string>\",\n      \"arrivalTimestamp\": \"<string>\",\n      \"departureTime\": \"<string>\",\n      \"departureTimestamp\": \"<string>\",\n      \"stopId\": \"<string>\",\n      \"stopSequence\": \"<integer>\",\n      \"shapeDistTraveled\": \"<number>\",\n      \"locationGroupId\": \"<string>\",\n      \"locationId\": \"<string>\",\n      \"stopHeadsign\": \"<string>\",\n      \"startPickupDropoffWindow\": \"<string>\",\n      \"startPickupDropoffWindowTimestamp\": \"<string>\",\n      \"pickupType\": 1,\n      \"dropOffType\": 3,\n      \"continuousPickup\": 3,\n      \"continuousDropoff\": 3,\n      \"timepoint\": 0,\n      \"pickupBookingRuleId\": \"<string>\",\n      \"dropOffBookingRuleId\": \"<string>\"\n    },\n    \"arrivalTime\": {\n      \"tripId\": \"<string>\",\n      \"arrivalTime\": \"<string>\",\n      \"arrivalTimestamp\": \"<string>\",\n      \"departureTime\": \"<string>\",\n      \"departureTimestamp\": \"<string>\",\n      \"stopId\": \"<string>\",\n      \"stopSequence\": \"<integer>\",\n      \"shapeDistTraveled\": \"<number>\",\n      \"locationGroupId\": \"<string>\",\n      \"locationId\": \"<string>\",\n      \"stopHeadsign\": \"<string>\",\n      \"startPickupDropoffWindow\": \"<string>\",\n      \"startPickupDropoffWindowTimestamp\": \"<string>\",\n      \"pickupType\": 2,\n      \"dropOffType\": 2,\n      \"continuousPickup\": 2,\n      \"continuousDropoff\": 1,\n      \"timepoint\": 0,\n      \"pickupBookingRuleId\": \"<string>\",\n      \"dropOffBookingRuleId\": \"<string>\"\n    },\n    \"route\": {\n      \"routeId\": \"<string>\",\n      \"routeType\": 1,\n      \"agencyId\": \"<string>\",\n      \"routeShortName\": \"<string>\",\n      \"routeLongName\": \"<string>\",\n      \"routeDesc\": \"<string>\",\n      \"routeUrl\": \"<string>\",\n      \"routeColor\": \"<string>\",\n      \"routeTextColor\": \"<string>\",\n      \"routeSortOrder\": \"<integer>\",\n      \"continuousPickup\": 3,\n      \"continuousDropoff\": 1,\n      \"networkId\": \"<string>\"\n    }\n  },\n  {\n    \"stop\": {\n      \"stopId\": \"<string>\",\n      \"stopCode\": \"<string>\",\n      \"stopName\": \"<string>\",\n      \"ttsStopName\": \"<string>\",\n      \"stopDesc\": \"<string>\",\n      \"stopLat\": \"<number>\",\n      \"stopLon\": \"<number>\",\n      \"zoneId\": \"<string>\",\n      \"stopUrl\": \"<string>\",\n      \"locationType\": 4,\n      \"parentStation\": \"<string>\",\n      \"stopTimezone\": \"<string>\",\n      \"wheelchairBoarding\": 1,\n      \"levelId\": \"<string>\",\n      \"platformCode\": \"<string>\"\n    },\n    \"trip\": {\n      \"tripId\": \"<string>\",\n      \"routeId\": \"<string>\",\n      \"serviceId\": \"<string>\",\n      \"tripHeadsign\": \"<string>\",\n      \"directionId\": 0,\n      \"shapeId\": \"<string>\",\n      \"wheelchairAccessible\": 1,\n      \"bikesAllowed\": 0,\n      \"tripShortName\": \"<string>\",\n      \"blockId\": \"<string>\"\n    },\n    \"departureTime\": {\n      \"tripId\": \"<string>\",\n      \"arrivalTime\": \"<string>\",\n      \"arrivalTimestamp\": \"<string>\",\n      \"departureTime\": \"<string>\",\n      \"departureTimestamp\": \"<string>\",\n      \"stopId\": \"<string>\",\n      \"stopSequence\": \"<integer>\",\n      \"shapeDistTraveled\": \"<number>\",\n      \"locationGroupId\": \"<string>\",\n      \"locationId\": \"<string>\",\n      \"stopHeadsign\": \"<string>\",\n      \"startPickupDropoffWindow\": \"<string>\",\n      \"startPickupDropoffWindowTimestamp\": \"<string>\",\n      \"pickupType\": 3,\n      \"dropOffType\": 0,\n      \"continuousPickup\": 2,\n      \"continuousDropoff\": 2,\n      \"timepoint\": 0,\n      \"pickupBookingRuleId\": \"<string>\",\n      \"dropOffBookingRuleId\": \"<string>\"\n    },\n    \"arrivalTime\": {\n      \"tripId\": \"<string>\",\n      \"arrivalTime\": \"<string>\",\n      \"arrivalTimestamp\": \"<string>\",\n      \"departureTime\": \"<string>\",\n      \"departureTimestamp\": \"<string>\",\n      \"stopId\": \"<string>\",\n      \"stopSequence\": \"<integer>\",\n      \"shapeDistTraveled\": \"<number>\",\n      \"locationGroupId\": \"<string>\",\n      \"locationId\": \"<string>\",\n      \"stopHeadsign\": \"<string>\",\n      \"startPickupDropoffWindow\": \"<string>\",\n      \"startPickupDropoffWindowTimestamp\": \"<string>\",\n      \"pickupType\": 3,\n      \"dropOffType\": 3,\n      \"continuousPickup\": 3,\n      \"continuousDropoff\": 2,\n      \"timepoint\": 0,\n      \"pickupBookingRuleId\": \"<string>\",\n      \"dropOffBookingRuleId\": \"<string>\"\n    },\n    \"route\": {\n      \"routeId\": \"<string>\",\n      \"routeType\": 109,\n      \"agencyId\": \"<string>\",\n      \"routeShortName\": \"<string>\",\n      \"routeLongName\": \"<string>\",\n      \"routeDesc\": \"<string>\",\n      \"routeUrl\": \"<string>\",\n      \"routeColor\": \"<string>\",\n      \"routeTextColor\": \"<string>\",\n      \"routeSortOrder\": \"<integer>\",\n      \"continuousPickup\": 2,\n      \"continuousDropoff\": 1,\n      \"networkId\": \"<string>\"\n    }\n  }\n]"
										},
										{
											"name": "BAD REQUEST",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/neighbors?time=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"neighbors"
													],
													"query": [
														{
															"key": "time",
															"value": "<string>",
															"description": "(Required) Departure time (HH:mm:ss)"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "NOT FOUND",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/neighbors?time=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"neighbors"
													],
													"query": [
														{
															"key": "time",
															"value": "<string>",
															"description": "(Required) Departure time (HH:mm:ss)"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "neighbors test bad format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains message in JSON format\", function () {\r",
													"    pm.expect(pm.response.json().message.to.exist);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stops/:stopId/neighbors?time=ab:cd:ef",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stops",
												":stopId",
												"neighbors"
											],
											"query": [
												{
													"key": "time",
													"value": "ab:cd:ef",
													"description": "(Required) Departure time (HH:mm:ss)"
												}
											],
											"variable": [
												{
													"key": "stopId",
													"value": "007884",
													"description": "(Required) Stop ID"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/neighbors?time=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"neighbors"
													],
													"query": [
														{
															"key": "time",
															"value": "<string>",
															"description": "(Required) Departure time (HH:mm:ss)"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"stop\": {\n      \"stopId\": \"<string>\",\n      \"stopCode\": \"<string>\",\n      \"stopName\": \"<string>\",\n      \"ttsStopName\": \"<string>\",\n      \"stopDesc\": \"<string>\",\n      \"stopLat\": \"<number>\",\n      \"stopLon\": \"<number>\",\n      \"zoneId\": \"<string>\",\n      \"stopUrl\": \"<string>\",\n      \"locationType\": 4,\n      \"parentStation\": \"<string>\",\n      \"stopTimezone\": \"<string>\",\n      \"wheelchairBoarding\": 0,\n      \"levelId\": \"<string>\",\n      \"platformCode\": \"<string>\"\n    },\n    \"trip\": {\n      \"tripId\": \"<string>\",\n      \"routeId\": \"<string>\",\n      \"serviceId\": \"<string>\",\n      \"tripHeadsign\": \"<string>\",\n      \"directionId\": 0,\n      \"shapeId\": \"<string>\",\n      \"wheelchairAccessible\": 0,\n      \"bikesAllowed\": 0,\n      \"tripShortName\": \"<string>\",\n      \"blockId\": \"<string>\"\n    },\n    \"departureTime\": {\n      \"tripId\": \"<string>\",\n      \"arrivalTime\": \"<string>\",\n      \"arrivalTimestamp\": \"<string>\",\n      \"departureTime\": \"<string>\",\n      \"departureTimestamp\": \"<string>\",\n      \"stopId\": \"<string>\",\n      \"stopSequence\": \"<integer>\",\n      \"shapeDistTraveled\": \"<number>\",\n      \"locationGroupId\": \"<string>\",\n      \"locationId\": \"<string>\",\n      \"stopHeadsign\": \"<string>\",\n      \"startPickupDropoffWindow\": \"<string>\",\n      \"startPickupDropoffWindowTimestamp\": \"<string>\",\n      \"pickupType\": 1,\n      \"dropOffType\": 3,\n      \"continuousPickup\": 3,\n      \"continuousDropoff\": 3,\n      \"timepoint\": 0,\n      \"pickupBookingRuleId\": \"<string>\",\n      \"dropOffBookingRuleId\": \"<string>\"\n    },\n    \"arrivalTime\": {\n      \"tripId\": \"<string>\",\n      \"arrivalTime\": \"<string>\",\n      \"arrivalTimestamp\": \"<string>\",\n      \"departureTime\": \"<string>\",\n      \"departureTimestamp\": \"<string>\",\n      \"stopId\": \"<string>\",\n      \"stopSequence\": \"<integer>\",\n      \"shapeDistTraveled\": \"<number>\",\n      \"locationGroupId\": \"<string>\",\n      \"locationId\": \"<string>\",\n      \"stopHeadsign\": \"<string>\",\n      \"startPickupDropoffWindow\": \"<string>\",\n      \"startPickupDropoffWindowTimestamp\": \"<string>\",\n      \"pickupType\": 2,\n      \"dropOffType\": 2,\n      \"continuousPickup\": 2,\n      \"continuousDropoff\": 1,\n      \"timepoint\": 0,\n      \"pickupBookingRuleId\": \"<string>\",\n      \"dropOffBookingRuleId\": \"<string>\"\n    },\n    \"route\": {\n      \"routeId\": \"<string>\",\n      \"routeType\": 1,\n      \"agencyId\": \"<string>\",\n      \"routeShortName\": \"<string>\",\n      \"routeLongName\": \"<string>\",\n      \"routeDesc\": \"<string>\",\n      \"routeUrl\": \"<string>\",\n      \"routeColor\": \"<string>\",\n      \"routeTextColor\": \"<string>\",\n      \"routeSortOrder\": \"<integer>\",\n      \"continuousPickup\": 3,\n      \"continuousDropoff\": 1,\n      \"networkId\": \"<string>\"\n    }\n  },\n  {\n    \"stop\": {\n      \"stopId\": \"<string>\",\n      \"stopCode\": \"<string>\",\n      \"stopName\": \"<string>\",\n      \"ttsStopName\": \"<string>\",\n      \"stopDesc\": \"<string>\",\n      \"stopLat\": \"<number>\",\n      \"stopLon\": \"<number>\",\n      \"zoneId\": \"<string>\",\n      \"stopUrl\": \"<string>\",\n      \"locationType\": 4,\n      \"parentStation\": \"<string>\",\n      \"stopTimezone\": \"<string>\",\n      \"wheelchairBoarding\": 1,\n      \"levelId\": \"<string>\",\n      \"platformCode\": \"<string>\"\n    },\n    \"trip\": {\n      \"tripId\": \"<string>\",\n      \"routeId\": \"<string>\",\n      \"serviceId\": \"<string>\",\n      \"tripHeadsign\": \"<string>\",\n      \"directionId\": 0,\n      \"shapeId\": \"<string>\",\n      \"wheelchairAccessible\": 1,\n      \"bikesAllowed\": 0,\n      \"tripShortName\": \"<string>\",\n      \"blockId\": \"<string>\"\n    },\n    \"departureTime\": {\n      \"tripId\": \"<string>\",\n      \"arrivalTime\": \"<string>\",\n      \"arrivalTimestamp\": \"<string>\",\n      \"departureTime\": \"<string>\",\n      \"departureTimestamp\": \"<string>\",\n      \"stopId\": \"<string>\",\n      \"stopSequence\": \"<integer>\",\n      \"shapeDistTraveled\": \"<number>\",\n      \"locationGroupId\": \"<string>\",\n      \"locationId\": \"<string>\",\n      \"stopHeadsign\": \"<string>\",\n      \"startPickupDropoffWindow\": \"<string>\",\n      \"startPickupDropoffWindowTimestamp\": \"<string>\",\n      \"pickupType\": 3,\n      \"dropOffType\": 0,\n      \"continuousPickup\": 2,\n      \"continuousDropoff\": 2,\n      \"timepoint\": 0,\n      \"pickupBookingRuleId\": \"<string>\",\n      \"dropOffBookingRuleId\": \"<string>\"\n    },\n    \"arrivalTime\": {\n      \"tripId\": \"<string>\",\n      \"arrivalTime\": \"<string>\",\n      \"arrivalTimestamp\": \"<string>\",\n      \"departureTime\": \"<string>\",\n      \"departureTimestamp\": \"<string>\",\n      \"stopId\": \"<string>\",\n      \"stopSequence\": \"<integer>\",\n      \"shapeDistTraveled\": \"<number>\",\n      \"locationGroupId\": \"<string>\",\n      \"locationId\": \"<string>\",\n      \"stopHeadsign\": \"<string>\",\n      \"startPickupDropoffWindow\": \"<string>\",\n      \"startPickupDropoffWindowTimestamp\": \"<string>\",\n      \"pickupType\": 3,\n      \"dropOffType\": 3,\n      \"continuousPickup\": 3,\n      \"continuousDropoff\": 2,\n      \"timepoint\": 0,\n      \"pickupBookingRuleId\": \"<string>\",\n      \"dropOffBookingRuleId\": \"<string>\"\n    },\n    \"route\": {\n      \"routeId\": \"<string>\",\n      \"routeType\": 109,\n      \"agencyId\": \"<string>\",\n      \"routeShortName\": \"<string>\",\n      \"routeLongName\": \"<string>\",\n      \"routeDesc\": \"<string>\",\n      \"routeUrl\": \"<string>\",\n      \"routeColor\": \"<string>\",\n      \"routeTextColor\": \"<string>\",\n      \"routeSortOrder\": \"<integer>\",\n      \"continuousPickup\": 2,\n      \"continuousDropoff\": 1,\n      \"networkId\": \"<string>\"\n    }\n  }\n]"
										},
										{
											"name": "BAD REQUEST",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/neighbors?time=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"neighbors"
													],
													"query": [
														{
															"key": "time",
															"value": "<string>",
															"description": "(Required) Departure time (HH:mm:ss)"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "NOT FOUND",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/neighbors?time=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"neighbors"
													],
													"query": [
														{
															"key": "time",
															"value": "<string>",
															"description": "(Required) Departure time (HH:mm:ss)"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "nearby",
							"item": [
								{
									"name": "nearby test 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 5s\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content type is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('array');\r",
													"    \r",
													"    responseData.forEach(function(item) {\r",
													"        pm.expect(item).to.include.all.keys('stopId', 'stopCode', 'stopName', 'stopLat', 'stopLon', 'wheelchairBoarding');\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"Response is empty\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData).to.be.an('array').that.is.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches OpenAPI schema\", function () {\r",
													"    const schema = {\r",
													"        \"type\": \"array\",\r",
													"        \"items\": {\r",
													"            \"type\": \"object\",\r",
													"            \"properties\": {\r",
													"                \"stopId\": { \"type\": \"string\" },\r",
													"                \"stopCode\": { \"type\": \"string\" },\r",
													"                \"stopName\": { \"type\": \"string\" },\r",
													"                \"stopLat\": { \"type\": \"number\" },\r",
													"                \"stopLon\": { \"type\": \"number\" },\r",
													"                \"wheelchairBoarding\": { \"type\": \"string\" }\r",
													"            },\r",
													"            \"required\": [\"stopId\", \"stopCode\", \"stopName\", \"stopLat\", \"stopLon\", \"wheelchairBoarding\"]\r",
													"        }\r",
													"    };\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains the correct stops\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.some(item => item.stopId === \"f00954\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"007884\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"009230\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"009309\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"011732\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"038717\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"056427\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00946\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00950\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00960\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00961\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00962\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00963\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00985\")).to.be.false;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stops",
												":stopId",
												"nearby"
											],
											"query": [
												{
													"key": "distance",
													"value": "0",
													"description": "(Required) Maximum distance from the stop in meters"
												}
											],
											"variable": [
												{
													"key": "stopId",
													"value": "F00954",
													"description": "(Required) Stop ID"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"stopId\": \"<string>\",\n    \"stopCode\": \"<string>\",\n    \"stopName\": \"<string>\",\n    \"ttsStopName\": \"<string>\",\n    \"stopDesc\": \"<string>\",\n    \"stopLat\": \"<number>\",\n    \"stopLon\": \"<number>\",\n    \"zoneId\": \"<string>\",\n    \"stopUrl\": \"<string>\",\n    \"locationType\": 3,\n    \"parentStation\": \"<string>\",\n    \"stopTimezone\": \"<string>\",\n    \"wheelchairBoarding\": 0,\n    \"levelId\": \"<string>\",\n    \"platformCode\": \"<string>\"\n  },\n  {\n    \"stopId\": \"<string>\",\n    \"stopCode\": \"<string>\",\n    \"stopName\": \"<string>\",\n    \"ttsStopName\": \"<string>\",\n    \"stopDesc\": \"<string>\",\n    \"stopLat\": \"<number>\",\n    \"stopLon\": \"<number>\",\n    \"zoneId\": \"<string>\",\n    \"stopUrl\": \"<string>\",\n    \"locationType\": 3,\n    \"parentStation\": \"<string>\",\n    \"stopTimezone\": \"<string>\",\n    \"wheelchairBoarding\": 0,\n    \"levelId\": \"<string>\",\n    \"platformCode\": \"<string>\"\n  }\n]"
										},
										{
											"name": "BAD REQUEST",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "NOT FOUND",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "INTERNAL SERVER ERROR",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "nearby test 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 5s\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content type is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('array');\r",
													"    \r",
													"    responseData.forEach(function(item) {\r",
													"        pm.expect(item).to.include.all.keys('stopId', 'stopCode', 'stopName', 'stopLat', 'stopLon', 'wheelchairBoarding');\r",
													"    });\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response is empty\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData).to.be.an('array').that.is.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains the correct stops\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.some(item => item.stopId === \"f00954\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"007884\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"009230\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"009309\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"011732\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"038717\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"056427\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00946\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00950\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00960\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00961\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00962\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00963\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00985\")).to.be.false;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=50",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stops",
												":stopId",
												"nearby"
											],
											"query": [
												{
													"key": "distance",
													"value": "50",
													"description": "(Required) Maximum distance from the stop in meters"
												}
											],
											"variable": [
												{
													"key": "stopId",
													"value": "F00954",
													"description": "(Required) Stop ID"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"stopId\": \"<string>\",\n    \"stopCode\": \"<string>\",\n    \"stopName\": \"<string>\",\n    \"ttsStopName\": \"<string>\",\n    \"stopDesc\": \"<string>\",\n    \"stopLat\": \"<number>\",\n    \"stopLon\": \"<number>\",\n    \"zoneId\": \"<string>\",\n    \"stopUrl\": \"<string>\",\n    \"locationType\": 3,\n    \"parentStation\": \"<string>\",\n    \"stopTimezone\": \"<string>\",\n    \"wheelchairBoarding\": 0,\n    \"levelId\": \"<string>\",\n    \"platformCode\": \"<string>\"\n  },\n  {\n    \"stopId\": \"<string>\",\n    \"stopCode\": \"<string>\",\n    \"stopName\": \"<string>\",\n    \"ttsStopName\": \"<string>\",\n    \"stopDesc\": \"<string>\",\n    \"stopLat\": \"<number>\",\n    \"stopLon\": \"<number>\",\n    \"zoneId\": \"<string>\",\n    \"stopUrl\": \"<string>\",\n    \"locationType\": 3,\n    \"parentStation\": \"<string>\",\n    \"stopTimezone\": \"<string>\",\n    \"wheelchairBoarding\": 0,\n    \"levelId\": \"<string>\",\n    \"platformCode\": \"<string>\"\n  }\n]"
										},
										{
											"name": "BAD REQUEST",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "NOT FOUND",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "INTERNAL SERVER ERROR",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "nearby test 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 5s\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content type is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('array');\r",
													"    \r",
													"    responseData.forEach(function(item) {\r",
													"        pm.expect(item).to.include.all.keys('stopId', 'stopCode', 'stopName', 'stopLat', 'stopLon', 'wheelchairBoarding');\r",
													"    });\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"StopId, stopCode, stopLat, and stopLon are non-empty strings or numbers\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
													"    \r",
													"    responseData.forEach(function(stop) {\r",
													"        pm.expect(stop.stopId).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
													"        pm.expect(stop.stopCode).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
													"        pm.expect(stop.stopLat).to.be.a('number').and.to.be.above(0);\r",
													"        pm.expect(stop.stopLon).to.be.a('number').and.to.be.above(0);\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains the correct stops\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.some(item => item.stopId === \"038717\")).to.be.true;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"f00954\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"007884\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"009230\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"009309\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"011732\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"056427\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00946\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00950\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00960\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00961\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00962\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00963\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00985\")).to.be.false;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=60",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stops",
												":stopId",
												"nearby"
											],
											"query": [
												{
													"key": "distance",
													"value": "60",
													"description": "(Required) Maximum distance from the stop in meters"
												}
											],
											"variable": [
												{
													"key": "stopId",
													"value": "F00954",
													"description": "(Required) Stop ID"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"stopId\": \"<string>\",\n    \"stopCode\": \"<string>\",\n    \"stopName\": \"<string>\",\n    \"ttsStopName\": \"<string>\",\n    \"stopDesc\": \"<string>\",\n    \"stopLat\": \"<number>\",\n    \"stopLon\": \"<number>\",\n    \"zoneId\": \"<string>\",\n    \"stopUrl\": \"<string>\",\n    \"locationType\": 3,\n    \"parentStation\": \"<string>\",\n    \"stopTimezone\": \"<string>\",\n    \"wheelchairBoarding\": 0,\n    \"levelId\": \"<string>\",\n    \"platformCode\": \"<string>\"\n  },\n  {\n    \"stopId\": \"<string>\",\n    \"stopCode\": \"<string>\",\n    \"stopName\": \"<string>\",\n    \"ttsStopName\": \"<string>\",\n    \"stopDesc\": \"<string>\",\n    \"stopLat\": \"<number>\",\n    \"stopLon\": \"<number>\",\n    \"zoneId\": \"<string>\",\n    \"stopUrl\": \"<string>\",\n    \"locationType\": 3,\n    \"parentStation\": \"<string>\",\n    \"stopTimezone\": \"<string>\",\n    \"wheelchairBoarding\": 0,\n    \"levelId\": \"<string>\",\n    \"platformCode\": \"<string>\"\n  }\n]"
										},
										{
											"name": "BAD REQUEST",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "NOT FOUND",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "INTERNAL SERVER ERROR",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "nearby test 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 5s\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content type is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('array');\r",
													"    \r",
													"    responseData.forEach(function(item) {\r",
													"        pm.expect(item).to.include.all.keys('stopId', 'stopCode', 'stopName', 'stopLat', 'stopLon', 'wheelchairBoarding');\r",
													"    });\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"StopId, stopCode, stopLat, and stopLon are non-empty strings or numbers\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
													"    \r",
													"    responseData.forEach(function(stop) {\r",
													"        pm.expect(stop.stopId).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
													"        pm.expect(stop.stopCode).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
													"        pm.expect(stop.stopLat).to.be.a('number').and.to.be.above(0);\r",
													"        pm.expect(stop.stopLon).to.be.a('number').and.to.be.above(0);\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains the correct stops\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.some(item => item.stopId === \"038717\")).to.be.true;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00960\")).to.be.true;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"f00954\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"007884\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"009230\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"009309\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"011732\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"056427\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00946\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00950\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00961\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00962\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00963\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00985\")).to.be.false;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=75",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stops",
												":stopId",
												"nearby"
											],
											"query": [
												{
													"key": "distance",
													"value": "75",
													"description": "(Required) Maximum distance from the stop in meters"
												}
											],
											"variable": [
												{
													"key": "stopId",
													"value": "F00954",
													"description": "(Required) Stop ID"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"stopId\": \"<string>\",\n    \"stopCode\": \"<string>\",\n    \"stopName\": \"<string>\",\n    \"ttsStopName\": \"<string>\",\n    \"stopDesc\": \"<string>\",\n    \"stopLat\": \"<number>\",\n    \"stopLon\": \"<number>\",\n    \"zoneId\": \"<string>\",\n    \"stopUrl\": \"<string>\",\n    \"locationType\": 3,\n    \"parentStation\": \"<string>\",\n    \"stopTimezone\": \"<string>\",\n    \"wheelchairBoarding\": 0,\n    \"levelId\": \"<string>\",\n    \"platformCode\": \"<string>\"\n  },\n  {\n    \"stopId\": \"<string>\",\n    \"stopCode\": \"<string>\",\n    \"stopName\": \"<string>\",\n    \"ttsStopName\": \"<string>\",\n    \"stopDesc\": \"<string>\",\n    \"stopLat\": \"<number>\",\n    \"stopLon\": \"<number>\",\n    \"zoneId\": \"<string>\",\n    \"stopUrl\": \"<string>\",\n    \"locationType\": 3,\n    \"parentStation\": \"<string>\",\n    \"stopTimezone\": \"<string>\",\n    \"wheelchairBoarding\": 0,\n    \"levelId\": \"<string>\",\n    \"platformCode\": \"<string>\"\n  }\n]"
										},
										{
											"name": "BAD REQUEST",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "NOT FOUND",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "INTERNAL SERVER ERROR",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "nearby test 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 5s\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content type is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('array');\r",
													"    \r",
													"    responseData.forEach(function(item) {\r",
													"        pm.expect(item).to.include.all.keys('stopId', 'stopCode', 'stopName', 'stopLat', 'stopLon', 'wheelchairBoarding');\r",
													"    });\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"StopId, stopCode, stopLat, and stopLon are non-empty strings or numbers\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
													"    \r",
													"    responseData.forEach(function(stop) {\r",
													"        pm.expect(stop.stopId).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
													"        pm.expect(stop.stopCode).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
													"        pm.expect(stop.stopLat).to.be.a('number').and.to.be.above(0);\r",
													"        pm.expect(stop.stopLon).to.be.a('number').and.to.be.above(0);\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains the correct stops\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.some(item => item.stopId === \"038717\")).to.be.true;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00960\")).to.be.true;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"007884\")).to.be.true;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"011732\")).to.be.true;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"056427\")).to.be.true;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00961\")).to.be.true;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00962\")).to.be.true;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00963\")).to.be.true;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00985\")).to.be.true;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"f00954\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"009230\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"009309\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00946\")).to.be.false;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00950\")).to.be.false;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=150",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stops",
												":stopId",
												"nearby"
											],
											"query": [
												{
													"key": "distance",
													"value": "150",
													"description": "(Required) Maximum distance from the stop in meters"
												}
											],
											"variable": [
												{
													"key": "stopId",
													"value": "F00954",
													"description": "(Required) Stop ID"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"stopId\": \"<string>\",\n    \"stopCode\": \"<string>\",\n    \"stopName\": \"<string>\",\n    \"ttsStopName\": \"<string>\",\n    \"stopDesc\": \"<string>\",\n    \"stopLat\": \"<number>\",\n    \"stopLon\": \"<number>\",\n    \"zoneId\": \"<string>\",\n    \"stopUrl\": \"<string>\",\n    \"locationType\": 3,\n    \"parentStation\": \"<string>\",\n    \"stopTimezone\": \"<string>\",\n    \"wheelchairBoarding\": 0,\n    \"levelId\": \"<string>\",\n    \"platformCode\": \"<string>\"\n  },\n  {\n    \"stopId\": \"<string>\",\n    \"stopCode\": \"<string>\",\n    \"stopName\": \"<string>\",\n    \"ttsStopName\": \"<string>\",\n    \"stopDesc\": \"<string>\",\n    \"stopLat\": \"<number>\",\n    \"stopLon\": \"<number>\",\n    \"zoneId\": \"<string>\",\n    \"stopUrl\": \"<string>\",\n    \"locationType\": 3,\n    \"parentStation\": \"<string>\",\n    \"stopTimezone\": \"<string>\",\n    \"wheelchairBoarding\": 0,\n    \"levelId\": \"<string>\",\n    \"platformCode\": \"<string>\"\n  }\n]"
										},
										{
											"name": "BAD REQUEST",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "NOT FOUND",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "INTERNAL SERVER ERROR",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "nearby test 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 5s\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content type is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('array');\r",
													"    \r",
													"    responseData.forEach(function(item) {\r",
													"        pm.expect(item).to.include.all.keys('stopId', 'stopCode', 'stopName', 'stopLat', 'stopLon', 'wheelchairBoarding');\r",
													"    });\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"StopId, stopCode, stopLat, and stopLon are non-empty strings or numbers\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
													"    \r",
													"    responseData.forEach(function(stop) {\r",
													"        pm.expect(stop.stopId).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
													"        pm.expect(stop.stopCode).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
													"        pm.expect(stop.stopLat).to.be.a('number').and.to.be.above(0);\r",
													"        pm.expect(stop.stopLon).to.be.a('number').and.to.be.above(0);\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains the correct stops\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.some(item => item.stopId === \"038717\")).to.be.true;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00960\")).to.be.true;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"007884\")).to.be.true;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"011732\")).to.be.true;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"056427\")).to.be.true;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00961\")).to.be.true;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00962\")).to.be.true;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00963\")).to.be.true;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00985\")).to.be.true;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"009230\")).to.be.true;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"009309\")).to.be.true;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00946\")).to.be.true;\r",
													"    pm.expect(responseData.some(item => item.stopId === \"F00950\")).to.be.true;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=3000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stops",
												":stopId",
												"nearby"
											],
											"query": [
												{
													"key": "distance",
													"value": "3000",
													"description": "(Required) Maximum distance from the stop in meters"
												}
											],
											"variable": [
												{
													"key": "stopId",
													"value": "F00954",
													"description": "(Required) Stop ID"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"stopId\": \"<string>\",\n    \"stopCode\": \"<string>\",\n    \"stopName\": \"<string>\",\n    \"ttsStopName\": \"<string>\",\n    \"stopDesc\": \"<string>\",\n    \"stopLat\": \"<number>\",\n    \"stopLon\": \"<number>\",\n    \"zoneId\": \"<string>\",\n    \"stopUrl\": \"<string>\",\n    \"locationType\": 3,\n    \"parentStation\": \"<string>\",\n    \"stopTimezone\": \"<string>\",\n    \"wheelchairBoarding\": 0,\n    \"levelId\": \"<string>\",\n    \"platformCode\": \"<string>\"\n  },\n  {\n    \"stopId\": \"<string>\",\n    \"stopCode\": \"<string>\",\n    \"stopName\": \"<string>\",\n    \"ttsStopName\": \"<string>\",\n    \"stopDesc\": \"<string>\",\n    \"stopLat\": \"<number>\",\n    \"stopLon\": \"<number>\",\n    \"zoneId\": \"<string>\",\n    \"stopUrl\": \"<string>\",\n    \"locationType\": 3,\n    \"parentStation\": \"<string>\",\n    \"stopTimezone\": \"<string>\",\n    \"wheelchairBoarding\": 0,\n    \"levelId\": \"<string>\",\n    \"platformCode\": \"<string>\"\n  }\n]"
										},
										{
											"name": "BAD REQUEST",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "NOT FOUND",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "INTERNAL SERVER ERROR",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "nearby test 7",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 5s\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content type is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('array');\r",
													"    \r",
													"    responseData.forEach(function(item) {\r",
													"        pm.expect(item).to.include.all.keys('stopId', 'stopCode', 'stopName', 'stopLat', 'stopLon', 'wheelchairBoarding');\r",
													"    });\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"StopId, stopCode, stopLat, and stopLon are non-empty strings or numbers\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
													"    \r",
													"    responseData.forEach(function(stop) {\r",
													"        pm.expect(stop.stopId).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
													"        pm.expect(stop.stopCode).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
													"        pm.expect(stop.stopLat).to.be.a('number').and.to.be.above(0);\r",
													"        pm.expect(stop.stopLon).to.be.a('number').and.to.be.above(0);\r",
													"    });\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=150",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stops",
												":stopId",
												"nearby"
											],
											"query": [
												{
													"key": "distance",
													"value": "150",
													"description": "(Required) Maximum distance from the stop in meters"
												}
											],
											"variable": [
												{
													"key": "stopId",
													"value": "F00954",
													"description": "(Required) Stop ID"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"stopId\": \"<string>\",\n    \"stopCode\": \"<string>\",\n    \"stopName\": \"<string>\",\n    \"ttsStopName\": \"<string>\",\n    \"stopDesc\": \"<string>\",\n    \"stopLat\": \"<number>\",\n    \"stopLon\": \"<number>\",\n    \"zoneId\": \"<string>\",\n    \"stopUrl\": \"<string>\",\n    \"locationType\": 3,\n    \"parentStation\": \"<string>\",\n    \"stopTimezone\": \"<string>\",\n    \"wheelchairBoarding\": 0,\n    \"levelId\": \"<string>\",\n    \"platformCode\": \"<string>\"\n  },\n  {\n    \"stopId\": \"<string>\",\n    \"stopCode\": \"<string>\",\n    \"stopName\": \"<string>\",\n    \"ttsStopName\": \"<string>\",\n    \"stopDesc\": \"<string>\",\n    \"stopLat\": \"<number>\",\n    \"stopLon\": \"<number>\",\n    \"zoneId\": \"<string>\",\n    \"stopUrl\": \"<string>\",\n    \"locationType\": 3,\n    \"parentStation\": \"<string>\",\n    \"stopTimezone\": \"<string>\",\n    \"wheelchairBoarding\": 0,\n    \"levelId\": \"<string>\",\n    \"platformCode\": \"<string>\"\n  }\n]"
										},
										{
											"name": "BAD REQUEST",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "NOT FOUND",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "INTERNAL SERVER ERROR",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "nearby test 8",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 5s\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify response message\", function () {\r",
													"    pm.expect(pm.response.json().message).to.exist;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=-10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stops",
												":stopId",
												"nearby"
											],
											"query": [
												{
													"key": "distance",
													"value": "-10",
													"description": "(Required) Maximum distance from the stop in meters"
												}
											],
											"variable": [
												{
													"key": "stopId",
													"value": "F00954",
													"description": "(Required) Stop ID"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"stopId\": \"<string>\",\n    \"stopCode\": \"<string>\",\n    \"stopName\": \"<string>\",\n    \"ttsStopName\": \"<string>\",\n    \"stopDesc\": \"<string>\",\n    \"stopLat\": \"<number>\",\n    \"stopLon\": \"<number>\",\n    \"zoneId\": \"<string>\",\n    \"stopUrl\": \"<string>\",\n    \"locationType\": 3,\n    \"parentStation\": \"<string>\",\n    \"stopTimezone\": \"<string>\",\n    \"wheelchairBoarding\": 0,\n    \"levelId\": \"<string>\",\n    \"platformCode\": \"<string>\"\n  },\n  {\n    \"stopId\": \"<string>\",\n    \"stopCode\": \"<string>\",\n    \"stopName\": \"<string>\",\n    \"ttsStopName\": \"<string>\",\n    \"stopDesc\": \"<string>\",\n    \"stopLat\": \"<number>\",\n    \"stopLon\": \"<number>\",\n    \"zoneId\": \"<string>\",\n    \"stopUrl\": \"<string>\",\n    \"locationType\": 3,\n    \"parentStation\": \"<string>\",\n    \"stopTimezone\": \"<string>\",\n    \"wheelchairBoarding\": 0,\n    \"levelId\": \"<string>\",\n    \"platformCode\": \"<string>\"\n  }\n]"
										},
										{
											"name": "BAD REQUEST",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "NOT FOUND",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "INTERNAL SERVER ERROR",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stops/:stopId/nearby?distance=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stops",
														":stopId",
														"nearby"
													],
													"query": [
														{
															"key": "distance",
															"value": "<number>",
															"description": "(Required) Maximum distance from the stop in meters"
														}
													],
													"variable": [
														{
															"key": "stopId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "data",
			"item": [
				{
					"name": "stops.geo.json",
					"item": [
						{
							"name": "/data/stops.geo.json",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body conforms to OpenAPI schema\", function () {\r",
											"    const schema = {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"            \"type\": {\"type\": \"string\"},\r",
											"            \"features\": {\r",
											"                \"type\": \"array\",\r",
											"                \"items\": {\r",
											"                    \"type\": \"object\",\r",
											"                    \"properties\": {\r",
											"                        \"type\": {\"type\": \"string\"},\r",
											"                        \"properties\": {\r",
											"                            \"type\": \"object\",\r",
											"                            \"properties\": {\r",
											"                                \"stop_id\": {\"type\": \"string\"},\r",
											"                                \"stop_code\": {\"type\": \"string\"},\r",
											"                                \"stop_name\": {\"type\": \"string\"},\r",
											"                                \"wheelchair_boarding\": {\"type\": \"number\"},\r",
											"                                \"parent_station\": {\"type\": \"string\"},\r",
											"                                \"routes\": {\r",
											"                                    \"type\": \"array\",\r",
											"                                    \"items\": {\r",
											"                                        \"type\": \"object\",\r",
											"                                        \"properties\": {\r",
											"                                            \"route_id\": {\"type\": \"string\"},\r",
											"                                            \"agency_id\": {\"type\": \"string\"},\r",
											"                                            \"route_short_name\": {\"type\": \"string\"},\r",
											"                                            \"route_desc\": {\"type\": \"string\"},\r",
											"                                            \"route_type\": {\"type\": \"number\"},\r",
											"                                            \"route_color\": {\"type\": \"string\"},\r",
											"                                            \"route_text_color\": {\"type\": \"string\"},\r",
											"                                            \"route_sort_order\": {\"type\": \"number\"}\r",
											"                                        },\r",
											"                                        \"required\": [\"route_id\", \"agency_id\", \"route_short_name\", \"route_desc\", \"route_type\", \"route_color\", \"route_text_color\", \"route_sort_order\"]\r",
											"                                    }\r",
											"                                },\r",
											"                                \"agency_name\": {\"type\": \"string\"}\r",
											"                            },\r",
											"                            \"required\": [\"stop_id\", \"stop_code\", \"stop_name\", \"routes\", \"agency_name\"]\r",
											"                        },\r",
											"                        \"geometry\": {\r",
											"                            \"type\": \"object\",\r",
											"                            \"properties\": {\r",
											"                                \"type\": {\"type\": \"string\"},\r",
											"                                \"coordinates\": {\r",
											"                                    \"type\": \"array\",\r",
											"                                    \"items\": {\"type\": \"number\"}\r",
											"                                }\r",
											"                            },\r",
											"                            \"required\": [\"type\", \"coordinates\"]\r",
											"                        }\r",
											"                    },\r",
											"                    \"required\": [\"type\", \"properties\", \"geometry\"]\r",
											"                }\r",
											"            }\r",
											"        },\r",
											"        \"required\": [\"type\", \"features\"]\r",
											"    };\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/data/stops.geo.json",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"data",
										"stops.geo.json"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/data/stops.geo.json",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"data",
												"stops.geo.json"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"agency_name\": \"<string>\",\n        \"stop_id\": \"<string>\",\n        \"stop_code\": \"<string>\",\n        \"stop_name\": \"<string>\",\n        \"wheelchair_boarding\": 0,\n        \"routes\": [\n          {\n            \"route_id\": \"<string>\",\n            \"agency_id\": \"<string>\",\n            \"route_short_name\": \"<string>\",\n            \"route_desc\": \"<string>\",\n            \"route_type\": 2,\n            \"route_color\": \"<string>\",\n            \"route_text_color\": \"<string>\",\n            \"route_sort_order\": \"<integer>\"\n          }\n        ]\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          \"<number>\",\n          \"<number>\"\n        ]\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"agency_name\": \"<string>\",\n        \"stop_id\": \"<string>\",\n        \"stop_code\": \"<string>\",\n        \"stop_name\": \"<string>\",\n        \"wheelchair_boarding\": 0,\n        \"routes\": [\n          {\n            \"route_id\": \"<string>\",\n            \"agency_id\": \"<string>\",\n            \"route_short_name\": \"<string>\",\n            \"route_desc\": \"<string>\",\n            \"route_type\": 5,\n            \"route_color\": \"<string>\",\n            \"route_text_color\": \"<string>\",\n            \"route_sort_order\": \"<integer>\"\n          }\n        ]\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          \"<number>\",\n          \"<number>\"\n        ]\n      }\n    }\n  ]\n}"
								},
								{
									"name": "INTERNAL SERVER ERROR",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/data/stops.geo.json",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"data",
												"stops.geo.json"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "shapes.geo.json",
					"item": [
						{
							"name": "/data/shapes.geo.json",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response conforms to OpenAPI schema\", function () {\r",
											"    const schema = {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"            \"type\": {\"type\": \"string\"},\r",
											"            \"features\": {\r",
											"                \"type\": \"array\",\r",
											"                \"items\": {\r",
											"                    \"type\": \"object\",\r",
											"                    \"properties\": {\r",
											"                        \"type\": {\"type\": \"string\"},\r",
											"                        \"properties\": {\r",
											"                            \"type\": \"object\",\r",
											"                            \"properties\": {\r",
											"                                \"route_id\": {\"type\": \"string\"},\r",
											"                                \"agency_id\": {\"type\": \"string\"},\r",
											"                                \"route_short_name\": {\"type\": \"string\"},\r",
											"                                \"route_desc\": {\"type\": \"string\"},\r",
											"                                \"agency_name\": {\"type\": \"string\"},\r",
											"                                \"route_type\": {\"type\": \"integer\"},\r",
											"                                \"route_color\": {\"type\": \"string\"},\r",
											"                                \"route_text_color\": {\"type\": \"string\"},\r",
											"                                \"route_sort_order\": {\"type\": \"integer\"}\r",
											"                            },\r",
											"                            \"required\": [\"route_id\", \"agency_id\", \"route_short_name\", \"route_desc\", \"agency_name\", \"route_type\", \"route_color\", \"route_text_color\", \"route_sort_order\"]\r",
											"                        },\r",
											"                        \"geometry\": {\r",
											"                            \"type\": \"object\",\r",
											"                            \"properties\": {\r",
											"                                \"type\": {\"type\": \"string\"},\r",
											"                                \"coordinates\": {\r",
											"                                    \"type\": \"array\",\r",
											"                                    \"items\": {\r",
											"                                        \"type\": \"array\",\r",
											"                                        \"items\": {\r",
											"                                            \"type\": \"array\",\r",
											"                                            \"items\": {\r",
											"                                                \"type\": \"number\"\r",
											"                                            }\r",
											"                                        }\r",
											"                                    }\r",
											"                                }\r",
											"                            },\r",
											"                            \"required\": [\"type\", \"coordinates\"]\r",
											"                        }\r",
											"                    },\r",
											"                    \"required\": [\"type\", \"properties\", \"geometry\"]\r",
											"                }\r",
											"            }\r",
											"        },\r",
											"        \"required\": [\"type\", \"features\"]\r",
											"    };\r",
											"\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/data/shapes.geo.json",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"data",
										"shapes.geo.json"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/data/shapes.geo.json",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"data",
												"shapes.geo.json"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"route_id\": \"<string>\",\n        \"agency_id\": \"<string>\",\n        \"route_short_name\": \"<string>\",\n        \"route_desc\": \"<string>\",\n        \"agency_name\": \"<string>\",\n        \"route_type\": 3,\n        \"route_color\": \"<string>\",\n        \"route_text_color\": \"<string>\",\n        \"route_sort_order\": \"<integer>\"\n      },\n      \"geometry\": {\n        \"type\": \"MultiLineString\",\n        \"coordinates\": [\n          [\n            {\n              \"type\": \"Point\",\n              \"coordinates\": [\n                \"<number>\",\n                \"<number>\"\n              ]\n            },\n            {\n              \"type\": \"Point\",\n              \"coordinates\": [\n                \"<number>\",\n                \"<number>\"\n              ]\n            }\n          ],\n          [\n            {\n              \"type\": \"Point\",\n              \"coordinates\": [\n                \"<number>\",\n                \"<number>\"\n              ]\n            },\n            {\n              \"type\": \"Point\",\n              \"coordinates\": [\n                \"<number>\",\n                \"<number>\"\n              ]\n            }\n          ]\n        ]\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"route_id\": \"<string>\",\n        \"agency_id\": \"<string>\",\n        \"route_short_name\": \"<string>\",\n        \"route_desc\": \"<string>\",\n        \"agency_name\": \"<string>\",\n        \"route_type\": 11,\n        \"route_color\": \"<string>\",\n        \"route_text_color\": \"<string>\",\n        \"route_sort_order\": \"<integer>\"\n      },\n      \"geometry\": {\n        \"type\": \"MultiLineString\",\n        \"coordinates\": [\n          [\n            {\n              \"type\": \"Point\",\n              \"coordinates\": [\n                \"<number>\",\n                \"<number>\"\n              ]\n            },\n            {\n              \"type\": \"Point\",\n              \"coordinates\": [\n                \"<number>\",\n                \"<number>\"\n              ]\n            }\n          ],\n          [\n            {\n              \"type\": \"Point\",\n              \"coordinates\": [\n                \"<number>\",\n                \"<number>\"\n              ]\n            },\n            {\n              \"type\": \"Point\",\n              \"coordinates\": [\n                \"<number>\",\n                \"<number>\"\n              ]\n            }\n          ]\n        ]\n      }\n    }\n  ]\n}"
								},
								{
									"name": "INTERNAL SERVER ERROR",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/data/shapes.geo.json",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"data",
												"shapes.geo.json"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://127.0.0.1:3333"
		},
		{
			"key": "stopId",
			"value": "string"
		}
	]
}